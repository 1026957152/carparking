package com.coalvalue.python.server;

import io.moquette.BrokerConstants;
import io.moquette.server.config.MemoryConfig;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;
import io.moquette.interception.AbstractInterceptHandler;
import io.moquette.interception.InterceptHandler;
import io.moquette.interception.messages.InterceptPublishMessage;
import io.moquette.server.Server;

import io.moquette.server.config.IConfig;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Properties;
import static io.moquette.spi.impl.Utils.readBytesAndRewind;
@Configuration

public class ModuleMqttBrokerConfig {
    static Integer BROKER_PORT = 110;
    static String BROKER_HOST = "localhost";
/*
    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {

        final IConfig classPathConfig = new ClasspathConfig();

        final Server mqttBroker = new Server();
        final List<? extends InterceptHandler> userHandlers = Arrays.asList(new PublisherListener());
        try {
            mqttBroker.startServer(classPathConfig, userHandlers);
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.println("moquette mqtt broker started, press ctrl-c to shutdown..");
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                System.out.println("stopping moquette mqtt broker..");
                mqttBroker.stopServer();
                System.out.println("moquette mqtt broker stopped");
            }
        });
    }

*/

    static class PublisherListener extends AbstractInterceptHandler {
        @Override
        public String getID() {
            return "556";
        }

        @Override
        public void onPublish(InterceptPublishMessage message) {

          //  message.getClientID();
            System.out.println("moquette mqtt broker message intercepted, topic: " + message.getClientID());//
            System.out.println("moquette mqtt broker message intercepted, topic: " + message.getUsername());//

            System.out.println("moquette mqtt broker message intercepted, topic: " +  new String(readBytesAndRewind(message.getPayload())));//


            System.out.println("moquette mqtt broker message intercepted, topic: " + message.getTopicName());//
             //       + ", content: " + new String(message.getPayload().array()));
        }
    }

    @Bean
    public Server broker() {

        // load topics from manifest file
        //loadTopics();

        Server mqttBroker = new Server();
        Properties props = new Properties();

        // get properties from manifest file
        props.setProperty(BrokerConstants.PORT_PROPERTY_NAME, Integer.toString(BROKER_PORT));
        props.setProperty(BrokerConstants.HOST_PROPERTY_NAME, BROKER_HOST);

        //   props.setProperty(BrokerConstants.PASSWORD_FILE_PROPERTY_NAME, Info.PATHS.PATH_DEVICES_FOLDER + "/mqtt-broker/config/password_file.conf");
        //  props.setProperty(BrokerConstants.PERSISTENT_STORE_PROPERTY_NAME, Info.PATHS.PATH_DEVICES_FOLDER + "/mqtt-broker/config/moquette_store.mapdb");

        List<? extends InterceptHandler> userHandlers = Collections.singletonList(new PublisherListener());

        IConfig config = new MemoryConfig(props);

        try {
            mqttBroker.startServer(config, userHandlers);
        } catch (IOException ex) {
            ex.printStackTrace();// throw new PluginStartupException("Plugin can't start for an IOException.", ex);
        }

        System.out.println("moquette mqtt broker started, press ctrl-c to shutdown..");
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                System.out.println("stopping moquette mqtt broker..");
                mqttBroker.stopServer();
                System.out.println("moquette mqtt broker stopped");
            }
        });

        return mqttBroker;
        // setDescription("MQTT broker listening to " + config.getProperty(BrokerConstants.HOST_PROPERTY_NAME) + ":" + config.getProperty(BrokerConstants.PORT_PROPERTY_NAME));
        //LOG.info("MQTT broker plugin started");
    }




    public static void main(String[] args) {
        Integer BROKER_PORT = 110;
        String BROKER_HOST = "localhost";
        // load topics from manifest file
        //loadTopics();

        Server mqttBroker = new Server();
        Properties props = new Properties();

        // get properties from manifest file
        props.setProperty(BrokerConstants.PORT_PROPERTY_NAME, Integer.toString(BROKER_PORT));
        props.setProperty(BrokerConstants.HOST_PROPERTY_NAME, BROKER_HOST);

     //   props.setProperty(BrokerConstants.PASSWORD_FILE_PROPERTY_NAME, Info.PATHS.PATH_DEVICES_FOLDER + "/mqtt-broker/config/password_file.conf");
      //  props.setProperty(BrokerConstants.PERSISTENT_STORE_PROPERTY_NAME, Info.PATHS.PATH_DEVICES_FOLDER + "/mqtt-broker/config/moquette_store.mapdb");

        List<? extends InterceptHandler> userHandlers = Collections.singletonList(new PublisherListener());

        IConfig config = new MemoryConfig(props);

        try {
            mqttBroker.startServer(config, userHandlers);
        } catch (IOException ex) {
           ex.printStackTrace();// throw new PluginStartupException("Plugin can't start for an IOException.", ex);
        }

        System.out.println("moquette mqtt broker started, press ctrl-c to shutdown..");
        Runtime.getRuntime().addShutdownHook(new Thread() {
            @Override
            public void run() {
                System.out.println("stopping moquette mqtt broker..");
                mqttBroker.stopServer();
                System.out.println("moquette mqtt broker stopped");
            }
        });
       // setDescription("MQTT broker listening to " + config.getProperty(BrokerConstants.HOST_PROPERTY_NAME) + ":" + config.getProperty(BrokerConstants.PORT_PROPERTY_NAME));
        //LOG.info("MQTT broker plugin started");
    }
}